#1st download pin for linux and windows

#Store pin archives inside the source tree
set(PIN_ARCHIVE_DIR ${PROJECT_SOURCE_DIR}/pin_sdk/pin_package)

#Check existing MSVC archive integrity
if(EXISTS ${PIN_ARCHIVE_DIR}/${PIN_FILE_MSVC})
	execute_process(COMMAND ${CMAKE_COMMAND} -E md5sum ${PIN_ARCHIVE_DIR}/${PIN_FILE_MSVC} OUTPUT_VARIABLE PIN_FILE_COMPUTED_MD5SUM_MSVC)
	string(SUBSTRING ${PIN_FILE_COMPUTED_MD5SUM_MSVC} 0 32 PIN_FILE_COMPUTED_MD5SUM_MSVC)
	string(COMPARE NOTEQUAL ${PIN_FILE_COMPUTED_MD5SUM_MSVC} ${PIN_FILE_MD5SUM_MSVC} PIN_ARCHIVE_BROKEN_MSVC)
	if(PIN_ARCHIVE_BROKEN_MSVC)
		message("${PIN_ARCHIVE_DIR}/${PIN_FILE_MSVC} is broken: expecting ${PIN_FILE_MD5SUM_MSVC} but got ${PIN_FILE_COMPUTED_MD5SUM_MSVC}")
	endif()
endif()

#Download MSVC archive if needed
if((${CMAKE_SYSTEM_NAME} STREQUAL "Windows" OR ${CMAKE_C_PLATFORM_ID} STREQUAL "MinGW") AND NOT EXISTS ${PIN_ARCHIVE_DIR}/${PIN_FILE_MSVC} OR PIN_ARCHIVE_BROKEN_MSVC)
	message("Pin is enabled, downloading PIN for MSVC from ${PIN_DOWNLOAD_URL}/${PIN_FILE_MSVC} with MD5 ${PIN_FILE_MD5SUM_MSVC} to ${PIN_ARCHIVE_DIR}/${PIN_FILE_MSVC}")
	file(DOWNLOAD ${PIN_DOWNLOAD_URL}/${PIN_FILE_MSVC} ${PIN_ARCHIVE_DIR}/${PIN_FILE_MSVC} EXPECTED_MD5 ${PIN_FILE_MD5SUM_MSVC} SHOW_PROGRESS)
endif()

#Check existing Linux archive integrity
if(EXISTS ${PIN_ARCHIVE_DIR}/${PIN_FILE_LINUX})
	execute_process(COMMAND ${CMAKE_COMMAND} -E md5sum ${PIN_ARCHIVE_DIR}/${PIN_FILE_LINUX} OUTPUT_VARIABLE PIN_FILE_COMPUTED_MD5SUM_LINUX)
	string(SUBSTRING ${PIN_FILE_COMPUTED_MD5SUM_LINUX} 0 32 PIN_FILE_COMPUTED_MD5SUM_LINUX)
	string(COMPARE NOTEQUAL ${PIN_FILE_COMPUTED_MD5SUM_LINUX} ${PIN_FILE_MD5SUM_LINUX} PIN_ARCHIVE_BROKEN_LINUX)
	if(PIN_ARCHIVE_BROKEN_LINUX)
		message("${PIN_ARCHIVE_DIR}/${PIN_FILE_LINUX} is broken: expecting ${PIN_FILE_MD5SUM_LINUX} but got ${PIN_FILE_COMPUTED_MD5SUM_LINUX}")
	endif()
endif()

#Download Linux archive if needed
if(${CMAKE_C_PLATFORM_ID} STREQUAL "Linux" AND NOT EXISTS ${PIN_ARCHIVE_DIR}/${PIN_FILE_LINUX} OR PIN_ARCHIVE_BROKEN_LINUX)
	message("Pin is enabled, downloading PIN for Linux from ${PIN_DOWNLOAD_URL}/${PIN_FILE_LINUX} with MD5 ${PIN_FILE_MD5SUM_LINUX} to ${PIN_ARCHIVE_DIR}/${PIN_FILE_LINUX}")
	file(DOWNLOAD ${PIN_DOWNLOAD_URL}/${PIN_FILE_LINUX} ${PIN_ARCHIVE_DIR}/${PIN_FILE_LINUX} EXPECTED_MD5 ${PIN_FILE_MD5SUM_LINUX} SHOW_PROGRESS)
endif()


#Rules for win or linux
if(${CMAKE_SYSTEM_NAME} STREQUAL "Windows" OR ${CMAKE_C_PLATFORM_ID} STREQUAL "MinGW")
	set(PIN_BUILD_FILE ${PIN_FILE_MSVC})
	set(PIN_HOME ${SYSTEMDRIVE}/${PIN_VERSION_MSVC})
      set(PIN_EXTRACT_DIR ${SYSTEMDRIVE})
elseif(${CMAKE_C_PLATFORM_ID} STREQUAL "Linux")
	set(PIN_BUILD_FILE ${PIN_FILE_LINUX})
	set(PIN_HOME ${PROJECT_BINARY_DIR}/${PIN_VERSION_LINUX})
      set(PIN_EXTRACT_DIR ${PROJECT_BINARY_DIR})
endif()

#extract and move to final dir (PIN_HOME)
if(NOT EXISTS ${PIN_HOME})
	#working_directory is mandatory under windows (grrr !)
	execute_process(COMMAND ${CMAKE_COMMAND} -E tar xzf ${PIN_ARCHIVE_DIR}/${PIN_BUILD_FILE} WORKING_DIRECTORY ${PIN_EXTRACT_DIR})
endif(NOT EXISTS ${PIN_HOME})
